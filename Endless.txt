// Endless
// Makes all NPCs spawn copies of themselves that do not drop Items and do not give EXP
// Whenever a copy is created it is stunned for 5 turns

NPC.prototype.death = function (damageType, flags) {
	var itemName, dropIndex;
	flags = flags || {};	

	// Drop Loot:
	this.dropLoot();
	
	// Destroy:
	this.destroy();
	
	// Random chance to shout upon death:
	if (util.frac() < 0.5) {
		this.shout();
	}
	
	// Slime King will not give EXP unless he is last one alive:
	if (this.type.name === 'ExpanderisTheSlimeKing' && gs.characterList.filter(char => char.type.name === 'ExpanderisTheSlimeKing' && char.isAlive).length > 0) {
		// Pass
	}
	else {
		gs.pc.gainExperience(this.killedExp());
	}
	

	// Blood:
	if (!gs.getObj(this.tileIndex) && !this.type.noBlood && !gs.isPit(this.tileIndex)) {
		gs.createObject(this.tileIndex, this.type.bloodTypeName);
	}
	
	// Rage:
	if (gs.pc.maxRage > 0 && flags.killer === gs.pc) {
		gs.pc.gainRage(1);
	}
	
	// Poof my summoned mobs:
	this.summonIDList.forEach(function (id) {
		if (gs.getCharWithID(id)) {
			if (gs.getCharWithID(id).type.name !== 'Tentacle') {
				gs.getCharWithID(id).popUpText('Poof!');
			}
			
			gs.getCharWithID(id).death();
		}
	});
	
	// Poof my summoned clouds:
	this.cloudIDList.forEach(function (id) {
		let cloud = gs.getCloudWithID(id);
		if (cloud) {
			gs.createPopUpTextAtTileIndex(cloud.tileIndex, 'Poof!');
			cloud.destroy();
		}
	}, this);
	
	// Tell my summoner I'm dead:
	if (this.summonerId && gs.getCharWithID(this.summonerId)) {
		util.removeFromArray(this.id, gs.getCharWithID(this.summonerId).summonIDList);
	}
	
	// Remove Charm:
	if (gs.pc.statusEffects.has('NPCCharm') && gs.pc.statusEffects.get('NPCCharm').casterId === this.id) {
		gs.pc.statusEffects.remove('NPCCharm');
	}
	
	// Player status effects: charm, constrict, curses etc.
	gs.pc.statusEffects.onNPCDeath();
	
	// Poof:
	if (this.name !== 'GobletShield') {
		gs.createParticlePoof(this.tileIndex);
	}
	
	
	// Sound:
	gs.playSound(gs.sounds.death, this.tileIndex);
	
	// Shake:
	if (this.name === 'GobletShield') {
		game.camera.shake(0.005, 200);
		game.camera.flash(0xffffff, 30);
	}
	else {
		game.camera.shake(0.005, 100);
		game.camera.flash(0xffffff, 10);
	}
	
	
	// onDeath Func:
	if (this.type.onDeath) {
		this.type.onDeath.use(this);
	}
	
	// Special Yendor Stuff:
	if (this.type.niceName === 'The Wizard Yendor') {
		this.yendorDeath();
	}
	
	gs.HUD.miniMap.refresh();
	
	// Achievements:
	if (flags.killer === gs.pc) {
		gs.pc.numKills += 1;
	}

	// End turn:
	if (gs.activeCharacter() === this) {
		this.endTurn(ACTION_TIME);
	}

	var indexList, safeIndexList, charType;

	charType = this.type.name;

	indexList = [];
	
	for(let i = 0;indexList.length ==  0 && i < 4; i++){
		// Find adjacent indices in which to summon:
		indexList = gs.getIndexListInRadius(this.tileIndex, 0.5 + i);	
		indexList = indexList.filter(index => gs.isPassable(index));
		indexList = indexList.filter(index => !gs.isPit(index));
		safeIndexList = indexList.filter(index => gs.isIndexSafeForCharType(index, charType));

		if (safeIndexList.length != 0){
			indexList = safeIndexList;
		}
	}

	if (indexList.length != 0 && charType.faction !== FACTION.HOSTILE){
		let npc = gs.createNPC(indexList[0], charType);
		npc.statusEffects.add('Stunned', {duration: 5});
		npc["exp"] = 0;
		npc.type.dropTable = undefined;
	}
	
};